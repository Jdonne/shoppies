[{"/home/jdonne/projects/intern-challenge/src/index.js":"1","/home/jdonne/projects/intern-challenge/src/App.js":"2","/home/jdonne/projects/intern-challenge/src/reportWebVitals.js":"3","/home/jdonne/projects/intern-challenge/src/components/Card.jsx":"4","/home/jdonne/projects/intern-challenge/src/components/Nom.jsx":"5","/home/jdonne/projects/intern-challenge/src/components/Submitted.jsx":"6"},{"size":500,"mtime":1610731690846,"results":"7","hashOfConfig":"8"},{"size":4903,"mtime":1610920138434,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1610731690846,"results":"10","hashOfConfig":"8"},{"size":673,"mtime":1610917995090,"results":"11","hashOfConfig":"8"},{"size":580,"mtime":1610917817298,"results":"12","hashOfConfig":"8"},{"size":691,"mtime":1610919403246,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"s8zsae",{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jdonne/projects/intern-challenge/src/index.js",[],["29","30"],"/home/jdonne/projects/intern-challenge/src/App.js",["31","32","33","34"],"import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"./components/Card\";\nimport Nom from \"./components/Nom\";\nimport Submitted from \"./components/Submitted\";\n\nconst App = () => {\n  const [search, setSearch] = useState(\"\");\n  const [movies, setMovie] = useState([]);\n  const [nomList, setNomList] = useState([]);\n  const [over, setOver] = useState(\"notOver\");\n  const [submit, setSubmit] = useState(\"notSubbed\");\n  const [hideNom, setHideNom] = useState(\"notHidden\");\n\n  let nomTemp = nomList.slice();\n  let searchVar = \"\";\n  let movieData = { Response: \"False\", Search: [{ Title: \"Enter Movie\" }] };\n\n  // search bar state change function\n  const handleSearchChange = (e) => {\n    searchVar = e.target.value;\n    setSearch(searchVar);\n    console.log();\n  };\n  // nomination button\n  const handleNomBtn = (e) => {\n    if (nomList.length < 5) {\n      nomTemp.push(movies[e.target.id]);\n      setNomList(nomTemp);\n    }\n  };\n  // remove nomination from list\n  const handleRemove = (e) => {\n    let foundIndex = nomTemp.findIndex((obj) => obj.Title == e.target.title);\n    nomTemp.splice(foundIndex, 1);\n    setNomList(nomTemp);\n  };\n\n  // handle submit classes/states\n  const handleSubmit = () => {\n    setSubmit(\"submitted\");\n    setHideNom(\"hideNom\");\n  };\n\n  // resets states to initial\n  const handleReset = () => {\n    setSearch(\"\");\n    setMovie([]);\n    setNomList([]);\n    setOver(\"notOver\");\n    setSubmit(\"notSubbed\");\n    setHideNom(\"notHidden\");\n  };\n  // fetches api on search state changes and nomlist change (remove button)\n  useEffect(() => {\n    async function apiFetch() {\n      try {\n        const movieAPI = await fetch(\n          \"http://www.omdbapi.com/?apikey=2be7a6b9&s=\" + search\n        );\n        movieData = await movieAPI.json();\n        if (movieData.Response !== \"False\") {\n          setMovie((state) => movieData.Search);\n        }\n      } catch {\n        console.log(\"error\");\n      }\n    }\n    if (search !== \"\") {\n      apiFetch();\n    }\n  }, [search, nomList]);\n  // matches nom list with movie list to remove from selection on render\n  useEffect(() => {\n    for (var i = 0; i < movies.length; i++) {\n      for (let k = 0; k < nomTemp.length; k++) {\n        if (nomTemp[k].imdbID === movies[i].imdbID) {\n          let movieIndex = movies.findIndex(\n            (obj) => obj.imdbID == nomTemp[k].imdbID\n          );\n          let removed = movies.slice();\n          removed.splice(movieIndex, 1);\n          setMovie((state) => removed);\n          return;\n        }\n      }\n    }\n    if (nomList.length === 5) {\n      setOver(\"over\");\n    } else {\n      setOver(\"notOver\");\n    }\n  });\n\n  return (\n    <div className=\"d-flex flex-column align-items-center  mainApp  \">\n      <h1 className=\"title my-2\">The Shoppies</h1>\n      <input\n        placeholder=\"search\"\n        className=\"mt-1 form-control w-50\"\n        type=\"text\"\n        id=\"search\"\n        value={search}\n        onChange={handleSearchChange}></input>\n      <h5 className=\"mt-2 title \">Enter Movie Title</h5>\n\n      <div className=\"row justify-content-center  nomArea  mt-4 mb-3\">\n        <div className=\"col-lg-5 border border-2 border-muted  rounded bg-dark mx-3  \">\n          <h4 className=\"mx-2 mt-4 text-light\">Movies:</h4>\n          <div className=\"mb-4\">\n            {movies.map((movie, index) => (\n              <Card\n                nomBtn={handleNomBtn}\n                key={index}\n                index={index}\n                title={movie.Title}\n                year={movie.Year}\n                imdb={movie.imdbID}\n                // toggle={toggleBtn}\n              />\n            ))}\n          </div>\n        </div>\n\n        <div\n          className={\n            hideNom +\n            \" col-lg-5 border border-2 rounded border-muted mx-3 nomSection   \"\n          }>\n          <h4 className=\"mx-2 mt-4\">Nominations:</h4>\n          <div className=\"mb-4\">\n            <div className={over}>\n              <h5 className=\"m-2 \">You've chosen 5 Nominations</h5>{\" \"}\n              <div className=\"d-flex\">\n                <button\n                  className=\"btn-sm btn btn-danger resetBtn m-2\"\n                  onClick={handleReset}>\n                  Reset\n                </button>\n                <button\n                  className=\"btn-sm btn btn-success m-2\"\n                  onClick={handleSubmit}>\n                  Submit\n                </button>\n              </div>\n            </div>\n            {nomList.map((movie, index) => (\n              <Nom\n                key={index}\n                removeBtn={handleRemove}\n                index={index}\n                title={movie.Title}\n                year={movie.Year}\n                imdb={movie.imdbID}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <Submitted nomList={nomList} submit={submit} reset={handleReset} />\n    </div>\n  );\n};\n\nexport default App;\n","/home/jdonne/projects/intern-challenge/src/reportWebVitals.js",[],"/home/jdonne/projects/intern-challenge/src/components/Card.jsx",["35"],"import React, { useState } from \"react\";\n\nconst Card = (props) => {\n  return (\n    <div className=\"d-flex m-2 align-items-center\">\n      <button\n        key={props.key}\n        id={props.index}\n        onClick={props.nomBtn}\n        title={props.title}\n        // onDoubleClick={handleToggle}\n        className={\" btn btn-warning mr-2\"}>\n        Nominate\n      </button>\n      <div className=\"mx-2\">\n        <a\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          href={\"https://www.imdb.com/title/\" + props.imdb}\n          className=\"link-info\">\n          {props.title + \" (\" + props.year + \")\"}\n        </a>\n      </div>\n    </div>\n  );\n};\nexport default Card;\n","/home/jdonne/projects/intern-challenge/src/components/Nom.jsx",[],"/home/jdonne/projects/intern-challenge/src/components/Submitted.jsx",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":34,"column":59,"nodeType":"42","messageId":"43","endLine":34,"endColumn":61},{"ruleId":"44","severity":1,"message":"45","line":61,"column":21,"nodeType":"46","endLine":61,"endColumn":42},{"ruleId":"44","severity":1,"message":"47","line":74,"column":3,"nodeType":"48","endLine":74,"endColumn":12,"suggestions":"49"},{"ruleId":"40","severity":1,"message":"41","line":79,"column":33,"nodeType":"42","messageId":"43","endLine":79,"endColumn":35},{"ruleId":"50","severity":1,"message":"51","line":1,"column":17,"nodeType":"48","messageId":"52","endLine":1,"endColumn":25},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","Assignments to the 'movieData' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","AwaitExpression","React Hook useEffect contains a call to 'setMovie'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [movies, nomList.length, nomTemp] as a second argument to the useEffect Hook.","Identifier",["55"],"no-unused-vars","'useState' is defined but never used.","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},"Add dependencies array: [movies, nomList.length, nomTemp]",{"range":"58","text":"59"},[2651,2651],", [movies, nomList.length, nomTemp]"]